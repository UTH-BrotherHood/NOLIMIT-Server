# thêm các trường cần thiết (ip, role của user) và access và refresh token.
# xử lí lại chức năng đăng xuất - logout (sử dụng blacklist và redis).
# xử lí chức năng đăng nhập khi đăng nhập sai các trường => không in ra lỗi chi tiết

# thêm route revoke token
- các tình huống cần revoke token:
    + Các trường hợp bảo mật:
        Phát hiện tài khoản bị xâm nhập
        Người dùng thay đổi mật khẩu
        Phát hiện hoạt động đáng ngờ
        Admin cần vô hiệu hóa tài khoản người dùng


    + Quản lý phiên đăng nhập:
        Người dùng muốn đăng xuất khỏi một thiết bị cụ thể
        Đăng xuất khỏi tất cả các thiết bị
        Xóa các phiên đăng nhập cũ


    + Tuân thủ chính sách:
        Thực thi chính sách bảo mật mới
        Đáp ứng yêu cầu pháp lý
        Thực hiện các thay đổi hệ thống lớn

- Cách triển khai revoke token hiệu quả:

    + Sử dụng Redis làm token blacklist:
        Lưu trữ các token đã bị thu hồi
        Tự động xóa token hết hạn
        Hiệu suất cao khi kiểm tra


    + Xử lý đồng bộ:
        Đảm bảo tất cả server đều nhận được thông tin về token bị thu hồi
        Xử lý cache và đồng bộ giữa các instance
        Giải quyết race conditions


    + Monitoring và Logging:
        Theo dõi các pattern revoke token bất thường
        Log đầy đủ thông tin về việc thu hồi
        Cảnh báo khi có nhiều revoke trong thời gian ngắn


    + Trải nghiệm người dùng:
        Thông báo cho người dùng về việc phiên bị kết thúc
        Hướng dẫn người dùng đăng nhập lại
        Giải thích lý do token bị thu hồi(nếu phù hợp)

- Để triển khai hệ thống revoke token hiệu quả, bạn nên:
    Sử dụng cơ sở dữ liệu phù hợp(Redis thường là lựa chọn tốt)
    Có chiến lược clear blacklist định kỳ
    Implement rate limiting cho các API revoke
    Có system monitoring để phát hiện vấn đề